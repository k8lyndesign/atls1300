#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Feb 21 08:34:15 2020

@author: kaitlynengelson + avacristofoli

Modified IC scripts! 
-Click and drag circles with pygame

This script will create 12 sprinkles to click and drag into a cake!  

"""

import pygame
from random import *

#define color variables
pink = (254,231,235)
yellow = (238,199,8)
blue = (102,152,187)
purple = (255,206,235)
orange = (232,140,28)
green = (87,156,136)
red = (254,77,51)
white = (255,255,255)
dpink = (249,196,204)
lpurp = (218, 201, 255)

#make color variable into a list
colorz = [yellow,blue,purple,orange,green,red,white,dpink,yellow,blue,purple,orange,green,red,white,dpink]

pygame.init() #initialize all the pygame functions

#create screen and math-y variables
screen = pygame.display.set_mode((800,800))
Run = True
drag = False #boolean that determines if dragging happens
x = 400 #where we want to draw stuff
y = 400
r = [10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40] #how big we want things to be
step = 1 #how fast the shakey effect is
numCirc = 16 #how many sprinks? 
rectList = [] # for storing rect objects 
speed = [randint(-step,step),randint(-step,step)] #randome displacement to add fun *****wiggles****** to our circle. 


#define the drawing of the circles
def drawCircles():
    for i in range(numCirc): 
        pygame.draw.circle(screen, (colorz[i]), (rectList[i].x + speed[0], rectList[i].y+speed[1]), r[i]) 

#define the drawing of ze cake 
def drawCake():
    pygame.draw.rect(screen,lpurp, [250,600,500,200])
    
# set up the rectangles randomly beneath our circles
def randomRect(screen): 
    size = screen.get_size()
    for i in range(numCirc):
        rectList.append(pygame.Rect(randint(0,size[0]/2),randint(0,size[1]/2),r[i],r[i]))
    return rectList


        
randomRect(screen) 

while Run: #start the game loop!
    
    for event in pygame.event.get(): #scan all events --things happening outside python (mouse and keyboard actions)
        if event.type == pygame.QUIT:
            pygame.quit() #add a quit function so it stops up background tasks
            
        elif event.type == pygame.MOUSEBUTTONDOWN:
            pos = pygame.mouse.get_pos() #get our x and y positions of where the click happened
            for i in range(numCirc): 
                if rectList[i].collidepoint(pos[0],pos[1]):
                    drag = True #whenever the mouse is down, we can potentially drag our shape. Word.
                    selected = i
                    pos = pygame.mouse.get_pos() #get our x and y positions of where the click happened
                    offsetX = rectList[i].x - pos[0] #let's calculate the difference between where the rectangle is and where the click happened
                    offsetY = rectList[i].y - pos[1]
            
        elif event.type == pygame.MOUSEMOTION:
            if drag: #remember drag is a boolean, and if statements want to know if something is true or not...so we can just pass our variable here!
                pos = event.pos #update position as mouse moves around
                #update the position of the shape based on where the mouse motion event is happening (where the cursor is)
                rectList[selected].x = pos[0] + offsetX 
                rectList[selected].y = pos[1] + offsetY
                
        elif event.type == pygame.MOUSEBUTTONUP: #ok, now we're done dragging, so we want to detect when the mouse button is released.
            drag = False #we can set our boolean to false, so we can't update our Rect position.
        
  
    
    screen.fill(pink) #draw/redraw the screen to "erase" previous drawings
    
    #draw the circles object on top of our rectangles with random colors and random sizes and draw cake
    drawCircles()
    drawCake()
     

    pygame.display.update() #update our image to our screen
